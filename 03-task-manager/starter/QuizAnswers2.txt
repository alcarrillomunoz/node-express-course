1. In this lesson, you created a middleware function called asyncWrapper. Why?
This allows us to handle the try catch blocks for each controller in a separate middleware function. It cleans up the controllers code and makes the async middleware reuseable. 

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    // your code here 
    return next(createCustomError(`No task with id: ${taskID}`, 404))
  }  
  res.status(200).json({ task });  
});  